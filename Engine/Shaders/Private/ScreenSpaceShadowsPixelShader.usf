//#include "SSRTRayCast.ush"
//#include "Random.ush"
//#include "BRDF.ush"
//#include "MonteCarlo.ush"
#include "SceneTextureParameters.ush"
#include "ScreenSpaceDenoise/SSDPublic.ush"

Texture2D SceneColorTexture;

float4 LightPositionAndInvRadius; // xyzw = (position.xyz, 1/radius)

void Main(
    in float4 SvPosition : SV_POSITION,
    out float4 OutColor : SV_Target0
)
{

    float2 UV = SvPosition.xy * View.BufferSizeAndInvSize.zw;  // 将像素位置归一化到UV坐标，范围[0,1], View.BufferSizeAndInvSize.zw是缓冲区的倒数尺寸(如1.0/1920, 1.0/1080)
    FGBufferData GBuffer = GetGBufferDataFromSceneTextures(UV);
	const float3 N = GBuffer.WorldNormal;
	const float SceneDepth = GBuffer.Depth;

	// translate SvPosition to viewPos (worldPos - cameraPos)
	float2 ScreenPos = ViewportUVToScreenPos((SvPosition.xy - View.ViewRectMin.xy) * View.ViewSizeAndInvSize.zw);
	uint2 PixelPos = (uint2)SvPosition.xy;
	const float3 PositionTranslatedWorld = mul(            // "TranslatedWorld"是UE的坐标系（世界空间减去相机相对原点）
		float4(ScreenPos * SceneDepth, SceneDepth, 1), 
		View.ScreenToTranslatedWorld
	).xyz;

	// view dir
	const float3 V = normalize(View.TranslatedWorldCameraOrigin - PositionTranslatedWorld);




    OutColor = LightPositionAndInvRadius;
	//OutColor = float4(UV, 0, 1);
}