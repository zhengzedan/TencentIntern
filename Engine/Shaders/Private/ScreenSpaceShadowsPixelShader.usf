//#include "SSRTRayCast.ush"
//#include "Random.ush"
//#include "BRDF.ush"
//#include "MonteCarlo.ush"
#include "SceneTextureParameters.ush"
#include "ScreenSpaceDenoise/SSDPublic.ush"


float4 LightPositionOrDirection; // xyzw = (position.xyz, 1/radius)


void Main(
    in float4 SvPosition : SV_POSITION,
    out float4 OutColor : SV_Target0
)
{
	int NumSteps = 100; 
	float Thickness = 0.02;
	float ShadowIntensity = 0.1; // 阴影强度(0-1)

    float2 UV = SvPosition.xy * View.BufferSizeAndInvSize.zw;  // 将像素位置归一化到UV坐标，范围[0,1], View.BufferSizeAndInvSize.zw是缓冲区的倒数尺寸(如1.0/1920, 1.0/1080)
    
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(UV);
	const float3 N = GBuffer.WorldNormal;
	const float SceneDepth = GBuffer.Depth;

	// translate SvPosition to viewPos (worldPos - cameraPos)
	float2 ScreenPos = ViewportUVToScreenPos((SvPosition.xy - View.ViewRectMin.xy) * View.ViewSizeAndInvSize.zw);
	uint2 PixelPos = (uint2)SvPosition.xy;
	const float4 PositionTranslatedWorld = mul(            // "TranslatedWorld"是UE的坐标系（世界空间减去相机相对原点）
		float4(ScreenPos * SceneDepth, SceneDepth, 1),     
		View.ScreenToTranslatedWorld
	);

	float4 clipPos = mul(PositionTranslatedWorld, View.TranslatedWorldToClip);
	float2 screenPos = (clipPos.xy * rcp(clipPos.w) ) * float2(0.5, -0.5) + 0.5;
	//OutColor = float4(screenPos.xy, 0, 1);

	// view dir
	const float3 V = normalize((View.TranslatedWorldCameraOrigin - PositionTranslatedWorld).xyz);

	// light direction
	const float3 LightDirection = -LightPositionOrDirection.xyz;

	// skip back ray
	float NdotL = dot(N, LightDirection);
	if (NdotL <= 0.0) {
 		OutColor = float4(0, 0, 0, 1);
		return ;
	}

	// parameters
	float stepSize = 10; // 后续要调整
	float4 rayStep = float4(LightDirection * stepSize, 0);

	// modify position to avoid self-intersection
	float4 currentTranslateWorldPos = PositionTranslatedWorld + float4(N, 0) * Thickness;

	// ray tracing
	float shadow = 1.0;
	OutColor = float4(1, 1, 1, 1);
	for (int i = 0; i < NumSteps; i++)
	{
		currentTranslateWorldPos += rayStep; // view pos
							   
		float4 currentClipPos = mul(currentTranslateWorldPos, View.TranslatedWorldToClip);
		float currentSceneDepth = ConvertFromDeviceZ(currentClipPos.z * rcp(currentClipPos.w));
		float2 currentUV = (currentClipPos.xy * rcp(currentClipPos.w)) * float2(0.5,-0.5) + 0.5;
		
		// check if outside the screen
		if (any(currentUV < 0.0) || any(currentUV > 1.0))
			return ;
		
		// sample depth, and transfer to world space
		FGBufferData currentGBuffer = GetGBufferDataFromSceneTextures(currentUV);
		float sampleSceneDepth = currentGBuffer.Depth;

		//float depthDiff = currentTranslateWorldPos.z - sampleTranslatedWorldPos.z;
		float depthDiff = currentSceneDepth - sampleSceneDepth;
		
		if (depthDiff > 0.1 && depthDiff < 50) {
			OutColor = float4(currentSceneDepth, sampleSceneDepth, i, 0.5);
			OutColor = float4(0, 0, 0, 1);
			return ;
		}

	}


}